CALLBACKS!!!!
------------
I want to remove/reset all added elements on the page by clicking it. To do so, I will run callbacks. Callbacks let me attach handlers to dynamic HTML.

Earlier on in my page, prior to $(document).ready, create a new function with the selector targeting my event handler.
When this new function is called, it will both create the new dynamic content and it will attach the handler to it.

function attach(){
    $('listener').event(function(){
        $(target).effect();
    });
}

Later on, after content is created, you can add this function into the same script section when you are executing jquery functions.







USING ON() FOR EVENT HANDLING
.on() continually listens for your specified event to take place...

The really neat thing about .on() is that every time the event happens in the corresponding target, the relevant parts of the document get scanned in real time. Thus, any new element added after page load will be detected and the code will run. Pretty great, huh?

NOTE: The more searching of the document the .on() function has to do, the slower your code will run. Selecting $(document) for everything in an average website won't slow down your performance at all, but if you have tens of thousands of dynamic HTML elements that you are trying to add handlers to, using a more specific selector can make a huge difference between your website crashing or working.


listener     event    target   function to run
$(div.a).on('click', 'button', function(){alert('you clicked a button!')});
(div with class="a")(inside div)

The .on() function takes up to 4 parameters and we will show you how they mesh with our example above:

The event: Are you waiting for a click? A submit? Keydown? In this case, we are looking for a click.
(Data you wish to pass to the handler. this is not required and seldom used. We're not using it here!)
The target: i.e. the element you are trying to target. Here we are targeting a button. So now our search is narrowed down listening for a button to be clicked.

The function you want to run: Just the stuff you want to attach! In our case, we are just going to alert to the screen that we clicked a button-- every time a button is clicked.

Every time the event you specified in the first item (1) happens, the function searches the document for the target(s) you specified in the third item (3). If the action was triggered by the correct element, the code you put in the fourth item (along with any information you passed from the optional second item) will be executed.



// HOVER METHOD!
$(".click").hover(
    function(){
        $(this).css("background", "linear-gradient(#800000 30%,#CCCCCC)");
    },
    function(){
        $(this).css("background", "linear-gradient(#999999 30%,#CCCCCC)");
    });

Events (functions to handle an event)
    .click()
    .on() - Attach event handler for events to elements, after page load
    .hover() - Bind one or two handlers to matched elements
    .live() - deprecated (JQuery 1.7)

Effects (functions to do some cool animation effects)

    .hide() - Hide the matched elements.
    .show() - Display the matched elements.
    .toggle() - Display or hide the matched elements.

    .slideDown() - Display the matched elements with a sliding motion.
    .slideUp() - Hide the matched elements with a sliding motion.
    .slideToggle() - Display or hide the matched elements with a sliding motion.

    .fadeOut() - Hide the matched elements by fading them to transparent.
    .fadeIn() - Display the matched elements by fading them to opaque.

CSS (adding or removing a class for any HTML element/DOM)

    .addClass() - Adds the specified CSS class(es) to each element in a set
    .removeClass() - Remove single, multiple, or all classes in a set of matched elements.

    .css() - Get value of a style property for the first element in the set of matched elements
        or set one or more CSS properties for every matched element.

Manipulation (retrieving or setting value or text in any HTML element)

    .data() - Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements.
    
    .before() - Insert content by the parameter, before each element in a matched set.
    .after() - Insert content by parameter after each element in a matched set.

    .val() - Get the current value of the first element in the set of matched elements
        or set the value of every matched element.
    .attr() - Get value of an attribute for the first element in the set of matched elements
        or set one or more attributes for every matched element.

    .html() - Get  HTML contents of first element in the set of matched elements
        or set the HTML contents of every matched element.
    .text() - Get the combined text contents of each element in the set of matched elements,
        including their descendants, or set the text contents of the matched elements.

    .append() - Insert content by parameter to end of each element in a matched set.
    .prepend() - Insert content by parameter to beginning of each element in a matched set.

        .append() and .html() do nearly the same thing; they both can alter the HTML content of the selected item. The function .append will add markup to the element in question, whereas .html() will overwrite the markup with whatever is run inside the parentheses. So keep in mind that if you want to add content, use .append(), but if you want to replace content, use .html().

        The functions .html() and .text() are different in a key way: .html() can be used to insert new HTML markup, meaning new HTML tags. .text() is used to get or set just the text value of an HTML element.

        For instance, you could use .text() to change the text of a paragraph, but if you want to put an ordered list inside of the paragraph, you need to use .html() to insert the appropriate tags into the paragraph.







JQUERY

To include jQuery library in HTML page:
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>


SYNTAX

The $ is how we access the whole jQuery library.
Next, you can utilize jQuery by adding () to the end of $.

This is how you call a jQuery function:

//  SELECTOR . METHOD ( FUNCTION, ETC. )
    $(object).event(function(){
        // more code //
    });

Example: When object 'body' (of HTML page) is clicked (an event), code will be executed:

    $('body').click(function(){
        // more code will go here
    });

The following instructs browser to run jQuery functions when the document itself is ready.

    $(document).ready(function(){
        // more code will go here
    });

Otherwise, the code will be live prior to pageload, before your HTML objects are there!


BASIC FLOW OF JQUERY:

    1. Select the element, class, or id using the jQuery selector
    2. Add an event listener: How will this event be triggered?
    3. Write the code on what you want to happen when the event is triggered.


GETTERS & SETTERS

Getter functions get the value of something.
The following gets the text from somewhere in a page

    var myText = $('#myParagraph').text();  // Sets variable myText with the text of #myParagraph
    alert(myText);                          // 'Gets' the text of myParagraph in an alert

Setter functions set the value of something.

    $('#myParagraph').text("See how .text() works as a setter!") // Updates the text of myParagraph